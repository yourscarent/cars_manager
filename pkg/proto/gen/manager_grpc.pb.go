// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: manager.proto

package cm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarsManagerClient is the client API for CarsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarsManagerClient interface {
	CreateCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCar(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCar(ctx context.Context, in *Update, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type carsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCarsManagerClient(cc grpc.ClientConnInterface) CarsManagerClient {
	return &carsManagerClient{cc}
}

func (c *carsManagerClient) CreateCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/CarsManager/CreateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsManagerClient) DeleteCar(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/CarsManager/DeleteCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsManagerClient) UpdateCar(ctx context.Context, in *Update, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/CarsManager/UpdateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarsManagerServer is the server API for CarsManager service.
// All implementations must embed UnimplementedCarsManagerServer
// for forward compatibility
type CarsManagerServer interface {
	CreateCar(context.Context, *Car) (*emptypb.Empty, error)
	DeleteCar(context.Context, *ID) (*emptypb.Empty, error)
	UpdateCar(context.Context, *Update) (*emptypb.Empty, error)
	mustEmbedUnimplementedCarsManagerServer()
}

// UnimplementedCarsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedCarsManagerServer struct {
}

func (UnimplementedCarsManagerServer) CreateCar(context.Context, *Car) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCar not implemented")
}
func (UnimplementedCarsManagerServer) DeleteCar(context.Context, *ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedCarsManagerServer) UpdateCar(context.Context, *Update) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCar not implemented")
}
func (UnimplementedCarsManagerServer) mustEmbedUnimplementedCarsManagerServer() {}

// UnsafeCarsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarsManagerServer will
// result in compilation errors.
type UnsafeCarsManagerServer interface {
	mustEmbedUnimplementedCarsManagerServer()
}

func RegisterCarsManagerServer(s grpc.ServiceRegistrar, srv CarsManagerServer) {
	s.RegisterService(&CarsManager_ServiceDesc, srv)
}

func _CarsManager_CreateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsManagerServer).CreateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarsManager/CreateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsManagerServer).CreateCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarsManager_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsManagerServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarsManager/DeleteCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsManagerServer).DeleteCar(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarsManager_UpdateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Update)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsManagerServer).UpdateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarsManager/UpdateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsManagerServer).UpdateCar(ctx, req.(*Update))
	}
	return interceptor(ctx, in, info, handler)
}

// CarsManager_ServiceDesc is the grpc.ServiceDesc for CarsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CarsManager",
	HandlerType: (*CarsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCar",
			Handler:    _CarsManager_CreateCar_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _CarsManager_DeleteCar_Handler,
		},
		{
			MethodName: "UpdateCar",
			Handler:    _CarsManager_UpdateCar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}
